# https://towardsdatascience.com/a-complete-guide-to-building-a-docker-image-serving-a-machine-learning-system-in-production-d8b5b0533bde
ARG CUDA_VERSION=11.8.0
ARG UBUNTU_VERSION=22.04

# https://gitlab.com/nvidia/container-images/cuda/blob/master/doc/supported-tags.md
FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-runtime-ubuntu${UBUNTU_VERSION}

ARG EXTRAS=""
ARG PYTHON_VERSION=3.9
ARG POETRY_VERSION=1.3.1

ENV PY="python${PYTHON_VERSION}"
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PIP_DEFAULT_TIMEOUT=100
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PIP_NO_CACHE_DIR=1

WORKDIR /app

RUN apt update \
    && apt install -y build-essential software-properties-common \
    && add-apt-repository -y ppa:deadsnakes/ppa \
    && apt install -y ${PY}-dev ${PY}-venv \
    && apt clean \
    && rm -rf /var/lib/apt/lists*

RUN pip3 install "poetry==${POETRY_VERSION}" \
    && poetry config virtualenvs.in-project true \
    && poetry env use ${PY}

COPY poetry.lock* pyproject.toml ./
RUN poetry install --no-interaction --no-ansi --no-root --extras "${EXTRAS}"

ENV VIRTUAL_ENV=/app/.venv
ENV PATH="${VIRTUAL_ENV}/bin:${PATH}"

COPY . ./

ENTRYPOINT [ "python", "-m", "nlp_service" ]
CMD [ "0.0.0.0:50100" ]
